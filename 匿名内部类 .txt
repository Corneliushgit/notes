在某个方法中创建的匿名内部类，如果使用该方法中定义的局部变量，要求该局部变量是final，因为该方法执行后，方法中定义的局部变量就会被回收了，而匿名内部类的生命周期可能更长，比如创建了一个匿名runnable实例可能在该方法中被注入到某个线程，该方法结束后，线程会后台运行，进而调用run方法，而run方法会使用当时那个方法中的局部变量。怎么办？实际上java编译器会在编译那个匿名的Runnable类实现时，将其引用的方法内局部变量复制一份，也就是说，匿名内部类仅以来其自身的内部属性。虽然这样解决了生命周期不一致的问题，但这样就有一个同一个变量值可能不一致的问题，因为在编译后，这已经是两个独立的变量了。 这对程序员来说是不能接受的，因为从实现程序上看，明明就是一个变量。所以干错，就必须要求是final的。